// Code generated by mockery v2.32.4. DO NOT EDIT.

package mocks

import (
	coinglass "funding-rate/coinglass"

	mock "github.com/stretchr/testify/mock"
)

// IFundingRepository is an autogenerated mock type for the IFundingRepository type
type IFundingRepository struct {
	mock.Mock
}

// AddFundingWatchList provides a mock function with given fields: chatID, pair
func (_m *IFundingRepository) AddFundingWatchList(chatID int64, pair coinglass.Pair) error {
	ret := _m.Called(chatID, pair)

	var r0 error
	if rf, ok := ret.Get(0).(func(int64, coinglass.Pair) error); ok {
		r0 = rf(chatID, pair)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetFundingHistory provides a mock function with given fields: pair
func (_m *IFundingRepository) GetFundingHistory(pair coinglass.Pair) ([]float64, error) {
	ret := _m.Called(pair)

	var r0 []float64
	var r1 error
	if rf, ok := ret.Get(0).(func(coinglass.Pair) ([]float64, error)); ok {
		return rf(pair)
	}
	if rf, ok := ret.Get(0).(func(coinglass.Pair) []float64); ok {
		r0 = rf(pair)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]float64)
		}
	}

	if rf, ok := ret.Get(1).(func(coinglass.Pair) error); ok {
		r1 = rf(pair)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFundingWatchList provides a mock function with given fields: chatID
func (_m *IFundingRepository) GetFundingWatchList(chatID int64) ([]coinglass.Pair, error) {
	ret := _m.Called(chatID)

	var r0 []coinglass.Pair
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) ([]coinglass.Pair, error)); ok {
		return rf(chatID)
	}
	if rf, ok := ret.Get(0).(func(int64) []coinglass.Pair); ok {
		r0 = rf(chatID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]coinglass.Pair)
		}
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(chatID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIFundingRepository creates a new instance of IFundingRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIFundingRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *IFundingRepository {
	mock := &IFundingRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
