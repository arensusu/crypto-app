// Code generated by mockery v2.32.4. DO NOT EDIT.

package mocks

import (
	domain "funding-rate/domain"

	mock "github.com/stretchr/testify/mock"
)

// FundingUsecase is an autogenerated mock type for the FundingUsecase type
type FundingUsecase struct {
	mock.Mock
}

// AddFundingSearched provides a mock function with given fields: chatID, exchange, symbol
func (_m *FundingUsecase) AddFundingSearched(chatID int64, exchange string, symbol string) error {
	ret := _m.Called(chatID, exchange, symbol)

	var r0 error
	if rf, ok := ret.Get(0).(func(int64, string, string) error); ok {
		r0 = rf(chatID, exchange, symbol)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetFundingData provides a mock function with given fields: exchange, symbol
func (_m *FundingUsecase) GetFundingData(exchange string, symbol string) (domain.FundingData, error) {
	ret := _m.Called(exchange, symbol)

	var r0 domain.FundingData
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (domain.FundingData, error)); ok {
		return rf(exchange, symbol)
	}
	if rf, ok := ret.Get(0).(func(string, string) domain.FundingData); ok {
		r0 = rf(exchange, symbol)
	} else {
		r0 = ret.Get(0).(domain.FundingData)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(exchange, symbol)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFundingDataOfUser provides a mock function with given fields: chatID
func (_m *FundingUsecase) GetFundingDataOfUser(chatID int64) ([]domain.FundingData, error) {
	ret := _m.Called(chatID)

	var r0 []domain.FundingData
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) ([]domain.FundingData, error)); ok {
		return rf(chatID)
	}
	if rf, ok := ret.Get(0).(func(int64) []domain.FundingData); ok {
		r0 = rf(chatID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.FundingData)
		}
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(chatID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFundingNotification provides a mock function with given fields: chatID
func (_m *FundingUsecase) GetFundingNotification(chatID int64) ([]domain.FundingNotification, error) {
	ret := _m.Called(chatID)

	var r0 []domain.FundingNotification
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) ([]domain.FundingNotification, error)); ok {
		return rf(chatID)
	}
	if rf, ok := ret.Get(0).(func(int64) []domain.FundingNotification); ok {
		r0 = rf(chatID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.FundingNotification)
		}
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(chatID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLastFiveFundingSearched provides a mock function with given fields: chatID
func (_m *FundingUsecase) GetLastFiveFundingSearched(chatID int64) ([]domain.Pair, error) {
	ret := _m.Called(chatID)

	var r0 []domain.Pair
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) ([]domain.Pair, error)); ok {
		return rf(chatID)
	}
	if rf, ok := ret.Get(0).(func(int64) []domain.Pair); ok {
		r0 = rf(chatID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Pair)
		}
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(chatID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewFundingUsecase creates a new instance of FundingUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFundingUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *FundingUsecase {
	mock := &FundingUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
