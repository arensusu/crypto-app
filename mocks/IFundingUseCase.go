// Code generated by mockery v2.32.4. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// IFundingUseCase is an autogenerated mock type for the IFundingUseCase type
type IFundingUseCase struct {
	mock.Mock
}

// Funding provides a mock function with given fields: chatID
func (_m *IFundingUseCase) Funding(chatID int64) string {
	ret := _m.Called(chatID)

	var r0 string
	if rf, ok := ret.Get(0).(func(int64) string); ok {
		r0 = rf(chatID)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// NewFunding provides a mock function with given fields: chatID, message
func (_m *IFundingUseCase) NewFunding(chatID int64, message string) string {
	ret := _m.Called(chatID, message)

	var r0 string
	if rf, ok := ret.Get(0).(func(int64, string) string); ok {
		r0 = rf(chatID, message)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// NewIFundingUseCase creates a new instance of IFundingUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIFundingUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *IFundingUseCase {
	mock := &IFundingUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
